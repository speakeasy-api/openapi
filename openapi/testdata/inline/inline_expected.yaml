openapi: 3.1.0
info:
  title: Enhanced Test API with Complex References
  version: 1.0.0
  description: A comprehensive test document with circular references, external refs, and duplicate schemas
  contact:
    name: Test Contact
    url: https://example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.example.com/v1
    description: Production server
tags:
  - name: users
    description: User operations
  - name: posts
    description: Post operations
  - name: organizations
    description: Organization operations
  - name: external
    description: External reference operations
paths:
  /users:
    get:
      tags:
        - users
      summary: List users
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            maximum: 100
            minimum: 1
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of users response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    minimum: 0
                  limit:
                    type: integer
                    minimum: 1
                  offset:
                    type: integer
                    minimum: 0
        "400":
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Error message
                  details:
                    type: object
                    additionalProperties: true
                    description: Additional error details
                required:
                  - code
                  - message
    post:
      tags:
        - users
      summary: Create user
      requestBody:
        description: Request body for creating a user
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  minLength: 1
                email:
                  type: string
                  format: email
                profile:
                  type: object
                  properties:
                    bio:
                      type: string
                      maxLength: 500
                      description: User biography
                    avatar_url:
                      type: string
                      format: uri
                      description: URL to user's avatar image
                    social_links:
                      type: object
                      additionalProperties:
                        type: string
                        format: uri
                    preferences:
                      type: object
                      properties:
                        theme:
                          type: string
                          enum:
                            - light
                            - dark
                            - auto
                          default: auto
                        notifications:
                          type: object
                          properties:
                            email:
                              type: boolean
                              default: true
                            push:
                              type: boolean
                              default: false
              required:
                - name
                - email
        required: true
      responses:
        "201":
          description: Single user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user_example:
                  summary: Example user
                  description: An example user object
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "John Doe"
                    email: "john.doe@example.com"
                    profile:
                      bio: "Software developer"
                      avatar_url: "https://example.com/avatar.jpg"
                      social_links:
                        github: "https://github.com/johndoe"
                        twitter: "https://twitter.com/johndoe"
                      preferences:
                        theme: "dark"
                        notifications:
                          email: true
                          push: false
        "400":
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Error message
                  details:
                    type: object
                    additionalProperties: true
                    description: Additional error details
                required:
                  - code
                  - message
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      summary: Get user by ID
      responses:
        "200":
          description: Single user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user_example:
                  summary: Example user
                  description: An example user object
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "John Doe"
                    email: "john.doe@example.com"
                    profile:
                      bio: "Software developer"
                      avatar_url: "https://example.com/avatar.jpg"
                      social_links:
                        github: "https://github.com/johndoe"
                        twitter: "https://twitter.com/johndoe"
                      preferences:
                        theme: "dark"
                        notifications:
                          email: true
                          push: false
        "404":
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Error message
                  details:
                    type: object
                    additionalProperties: true
                    description: Additional error details
                required:
                  - code
                  - message
    put:
      tags:
        - users
      summary: Update user
      requestBody:
        description: Request body for updating a user
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  minLength: 1
                email:
                  type: string
                  format: email
                profile:
                  type: object
                  properties:
                    bio:
                      type: string
                      maxLength: 500
                      description: User biography
                    avatar_url:
                      type: string
                      format: uri
                      description: URL to user's avatar image
                    social_links:
                      type: object
                      additionalProperties:
                        type: string
                        format: uri
                    preferences:
                      type: object
                      properties:
                        theme:
                          type: string
                          enum:
                            - light
                            - dark
                            - auto
                          default: auto
                        notifications:
                          type: object
                          properties:
                            email:
                              type: boolean
                              default: true
                            push:
                              type: boolean
                              default: false
        required: true
      responses:
        "200":
          description: Single user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user_example:
                  summary: Example user
                  description: An example user object
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "John Doe"
                    email: "john.doe@example.com"
                    profile:
                      bio: "Software developer"
                      avatar_url: "https://example.com/avatar.jpg"
                      social_links:
                        github: "https://github.com/johndoe"
                        twitter: "https://twitter.com/johndoe"
                      preferences:
                        theme: "dark"
                        notifications:
                          email: true
                          push: false
        "404":
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Error message
                  details:
                    type: object
                    additionalProperties: true
                    description: Additional error details
                required:
                  - code
                  - message
  /external-users:
    get:
      tags:
        - users
      summary: Get external users (uses conflicting User schema)
      responses:
        "200":
          description: List of external users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User_1"
  /posts:
    get:
      tags:
        - posts
      summary: List posts
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
              examples:
                posts_example:
                  summary: Example posts
                  description: An example list of posts
                  value:
                    - id: "456e7890-e89b-12d3-a456-426614174001"
                      title: "My First Post"
                      content: "This is my first post content"
                      author_id: "123e4567-e89b-12d3-a456-426614174000"
                      tags: ["introduction", "first-post"]
                      created_at: "2023-01-01T12:00:00Z"
                      updated_at: "2023-01-01T12:00:00Z"
    post:
      tags:
        - posts
      summary: Create post (uses circular Post schema)
      requestBody:
        description: Post creation data
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content, author_id]
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                content:
                  type: string
                  minLength: 1
                author_id:
                  type: string
                  format: uuid
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: Created post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
  # Additional operations using the same circular reference schemas
  /users/{id}/posts:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags: [posts]
      summary: Get user posts (uses circular Post schema)
      responses:
        "200":
          description: List of user posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Error message
                  details:
                    type: object
                    additionalProperties: true
                    description: Additional error details
                required:
                  - code
                  - message
  /posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Post ID
        schema:
          type: string
          format: uuid
    get:
      tags: [posts]
      summary: Get post by ID (uses circular Post schema)
      responses:
        "200":
          description: Single post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Error message
                  details:
                    type: object
                    additionalProperties: true
                    description: Additional error details
                required:
                  - code
                  - message
  # External reference operations
  /external/users:
    get:
      tags: [external]
      summary: Get external users (external ref to same User schema)
      responses:
        "200":
          description: External users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /external/organizations:
    get:
      tags: [external]
      summary: Get organizations (external ref to different schema)
      responses:
        "200":
          description: Organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                      maxLength: 200
                      minLength: 1
                    description:
                      type: string
                    website:
                      type: string
                      format: uri
                    members:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
                  required:
                    - id
                    - name
  /external/simple:
    get:
      tags: [external]
      summary: Get simple external data
      responses:
        "200":
          description: Simple external data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    maxLength: 100
                    minLength: 1
                  description:
                    type: string
                    maxLength: 500
                  created_at:
                    type: string
                    format: date-time
                required:
                  - id
                  - name
  /mixed/user-with-external-profile:
    get:
      tags: [external]
      summary: Mixed internal/external references
      responses:
        "200":
          description: User with external profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  external_profile:
                    type: object
                    properties:
                      bio:
                        type: string
                        maxLength: 500
                        description: User biography
                      avatar_url:
                        type: string
                        format: uri
                        description: URL to user's avatar image
                      social_links:
                        type: object
                        additionalProperties:
                          type: string
                          format: uri
                      preferences:
                        type: object
                        properties:
                          theme:
                            type: string
                            enum:
                              - light
                              - dark
                              - auto
                            default: auto
                          notifications:
                            type: object
                            properties:
                              email:
                                type: boolean
                                default: true
                              push:
                                type: boolean
                                default: false
                  simple_data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                        maxLength: 100
                        minLength: 1
                      description:
                        type: string
                        maxLength: 500
                      created_at:
                        type: string
                        format: date-time
                    required:
                      - id
                      - name
  # More operations to test $defs duplication
  /users/search:
    get:
      tags: [users]
      summary: Search users (another operation using User schema)
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
  /posts/search:
    get:
      tags: [posts]
      summary: Search posts (another operation using Post schema)
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  total:
                    type: integer
  # Test complex external parameter bundling with multi-level references
  /external/complex-filter:
    get:
      tags: [external]
      summary: Test external parameter with complex reference chain
      parameters:
        - name: filter
          in: query
          description: Complex filtering parameter with local schema that has external references
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  type:
                    type: string
                    maxLength: 2048
                    format: uri-reference
                    description: |
                      A [URI reference (RFC3986)](https://tools.ietf.org/html/rfc3986) that identifies the problem type. If present, this is the URL of human-readable HTML documentation for the problem type. When this member is not present, its value is assumed to be `"about:blank"`.
                  title:
                    type: string
                    maxLength: 120
                    format: text
                    description: |
                      A short, human-readable summary of the problem type. The title is usually the same for all problems with the same `type`.
                  status:
                    type: integer
                    maximum: 599
                    minimum: 100
                    format: int32
                    description: |
                      The [HTTP status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6) for this occurrence of the problem.
                  detail:
                    type: string
                    maxLength: 256
                    format: text
                    description: |
                      A human-readable explanation specific to this occurrence of the problem.
                  instance:
                    type: string
                    maxLength: 2048
                    format: uri-reference
                    description: |
                      A URI reference that identifies the specific occurrence of the problem. This is the URI of an API resource that the problem is related to, with a unique error correlation ID URI fragment
                title: API Problem
                description: API problem or error, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).
              userProfile:
                type: object
                properties:
                  bio:
                    type: string
                    maxLength: 500
                    description: User biography
                  avatar_url:
                    type: string
                    format: uri
                    description: URL to user's avatar image
                  social_links:
                    type: object
                    additionalProperties:
                      type: string
                      format: uri
                  preferences:
                    type: object
                    properties:
                      theme:
                        type: string
                        enum:
                          - light
                          - dark
                          - auto
                        default: auto
                      notifications:
                        type: object
                        properties:
                          email:
                            type: boolean
                            default: true
                          push:
                            type: boolean
                            default: false
              userPreferences:
                type: object
                properties:
                  theme:
                    type: string
                    enum:
                      - light
                      - dark
                      - auto
                    default: auto
                  notifications:
                    type: object
                    properties:
                      email:
                        type: boolean
                        default: true
                      push:
                        type: boolean
                        default: false
              tags:
                type: array
                items:
                  type: string
            description: Filter criteria with external references
        - name: pagination
          in: query
          description: Pagination parameter with nested external references
          schema:
            type: object
            properties:
              page:
                type: integer
                minimum: 1
                default: 1
              size:
                type: integer
                maximum: 100
                minimum: 1
                default: 20
              sortUser:
                $ref: '#/components/schemas/external_user_yaml'
              metadata:
                type: object
                properties: {}
                title: Abstract Body
                description: An abstract schema used to define other request and response body model schemas.
            description: Pagination request with external validation schema
      responses:
        "200":
          description: Filtered results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        profile:
          type: object
          properties:
            bio:
              type: string
              maxLength: 500
              description: User biography
            avatar_url:
              type: string
              format: uri
              description: URL to user's avatar image
            social_links:
              type: object
              additionalProperties:
                type: string
                format: uri
            preferences:
              type: object
              properties:
                theme:
                  type: string
                  enum:
                    - light
                    - dark
                    - auto
                  default: auto
                notifications:
                  type: object
                  properties:
                    email:
                      type: boolean
                      default: true
                    push:
                      type: boolean
                      default: false
        posts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              title:
                type: string
                maxLength: 200
                minLength: 1
              content:
                type: string
                minLength: 1
              author_id:
                type: string
                format: uuid
              author:
                $ref: '#/components/schemas/User'
              tags:
                type: array
                items:
                  type: string
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
            required:
              - id
              - title
              - content
              - author_id
          description: Posts created by this user
    Post:
      type: object
      required:
        - id
        - title
        - content
        - author_id
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        author_id:
          type: string
          format: uuid
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Unique user identifier
            name:
              type: string
              maxLength: 100
              minLength: 1
              description: User's full name
            email:
              type: string
              format: email
              description: User's email address
            profile:
              type: object
              properties:
                bio:
                  type: string
                  maxLength: 500
                  description: User biography
                avatar_url:
                  type: string
                  format: uri
                  description: URL to user's avatar image
                social_links:
                  type: object
                  additionalProperties:
                    type: string
                    format: uri
                preferences:
                  type: object
                  properties:
                    theme:
                      type: string
                      enum:
                        - light
                        - dark
                        - auto
                      default: auto
                    notifications:
                      type: object
                      properties:
                        email:
                          type: boolean
                          default: true
                        push:
                          type: boolean
                          default: false
            posts:
              type: array
              items:
                $ref: '#/components/schemas/Post'
              description: Posts created by this user
          required:
            - id
            - name
            - email
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User_1:
      type: object
      properties:
        userId:
          type: integer
          description: Numeric user identifier (conflicts with string id)
        username:
          type: string
          maxLength: 50
          minLength: 3
          description: User's username (conflicts with name field)
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum:
            - admin
            - user
            - guest
          description: User's role in the system
          default: user
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        manager:
          $ref: '#/components/schemas/User_1'
          description: User's manager (creates circular reference)
      required:
        - userId
        - username
    external_user_yaml:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        name:
          type: string
          maxLength: 100
          minLength: 1
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        profile:
          $ref: '#/components/schemas/external_user_yaml'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/external_user_yaml'
          description: Posts created by this user
      required:
        - id
        - name
        - email
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
security:
  - BearerAuth: []
