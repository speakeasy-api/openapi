openapi: 3.1.0
info:
  title: Enhanced Test API with Complex References
  version: 1.0.0
  description: A comprehensive test document with circular references, external refs, and duplicate schemas
  contact:
    name: Test Contact
    url: https://example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.example.com/v1
    description: Production server
tags:
  - name: users
    description: User operations
  - name: posts
    description: Post operations
  - name: organizations
    description: Organization operations
  - name: external
    description: External reference operations
paths:
  /users:
    get:
      tags:
        - users
      summary: List users
      parameters:
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserListResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - users
      summary: Create user
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      responses:
        "201":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/UserIdParam"
    get:
      tags:
        - users
      summary: Get user by ID
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
        - users
      summary: Update user
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserRequest"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
  /external-users:
    get:
      tags:
        - users
      summary: Get external users (uses conflicting User schema)
      responses:
        "200":
          description: List of external users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User_1"
  /posts:
    get:
      tags:
        - posts
      summary: List posts
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
              examples:
                posts_example:
                  $ref: "#/components/examples/PostsExample"
    post:
      tags:
        - posts
      summary: Create post (uses circular Post schema)
      requestBody:
        description: Post creation data
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content, author_id]
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                content:
                  type: string
                  minLength: 1
                author_id:
                  type: string
                  format: uuid
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: Created post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
  # Additional operations using the same circular reference schemas
  /users/{id}/posts:
    parameters:
      - $ref: "#/components/parameters/UserIdParam"
    get:
      tags: [posts]
      summary: Get user posts (uses circular Post schema)
      responses:
        "200":
          description: List of user posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          $ref: "#/components/responses/ErrorResponse"
  /posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Post ID
        schema:
          type: string
          format: uuid
    get:
      tags: [posts]
      summary: Get post by ID (uses circular Post schema)
      responses:
        "200":
          description: Single post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          $ref: "#/components/responses/ErrorResponse"
  # External reference operations
  /external/users:
    get:
      tags: [external]
      summary: Get external users (external ref to same User schema)
      responses:
        "200":
          description: External users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /external/organizations:
    get:
      tags: [external]
      summary: Get organizations (external ref to different schema)
      responses:
        "200":
          description: Organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
  /external/simple:
    get:
      tags: [external]
      summary: Get simple external data
      responses:
        "200":
          description: Simple external data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/external_simple_schema"
  /mixed/user-with-external-profile:
    get:
      tags: [external]
      summary: Mixed internal/external references
      responses:
        "200":
          description: User with external profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  external_profile:
                    $ref: "#/components/schemas/external_user_profile"
                  simple_data:
                    $ref: "#/components/schemas/external_simple_schema"
  # More operations to test $defs duplication
  /users/search:
    get:
      tags: [users]
      summary: Search users (another operation using User schema)
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
  /posts/search:
    get:
      tags: [posts]
      summary: Search posts (another operation using Post schema)
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  total:
                    type: integer
  # Test complex external parameter bundling with multi-level references
  /external/complex-filter:
    get:
      tags: [external]
      summary: Test external parameter with complex reference chain
      parameters:
        - $ref: '#/components/parameters/ComplexFilterParam'
        - $ref: '#/components/parameters/PaginationParam'
      responses:
        "200":
          description: Filtered results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
components:
  parameters:
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
        default: 0
    UserIdParam:
      name: id
      in: path
      required: true
      description: User ID
      schema:
        type: string
        format: uuid
    ComplexFilterParam:
      name: filter
      in: query
      description: Complex filtering parameter with local schema that has external references
      schema:
        $ref: '#/components/schemas/FilterCriteria'
    PaginationParam:
      name: pagination
      in: query
      description: Pagination parameter with nested external references
      schema:
        $ref: '#/components/schemas/PaginationRequest'
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        profile:
          $ref: "#/components/schemas/UserProfile"
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
          description: Posts created by this user
    UserProfile:
      type: object
      properties:
        bio:
          type: string
          maxLength: 500
          description: User biography
        avatar_url:
          type: string
          format: uri
          description: URL to user's avatar image
        social_links:
          type: object
          additionalProperties:
            type: string
            format: uri
        preferences:
          $ref: "#/components/schemas/UserPreferences"
    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: false
    Post:
      type: object
      required:
        - id
        - title
        - content
        - author_id
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        author_id:
          type: string
          format: uuid
        author:
          $ref: "#/components/schemas/User"
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    # Circular reference example - Tree structure
    TreeNode:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/TreeNode"
        parent:
          $ref: "#/components/schemas/TreeNode"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          additionalProperties: true
          description: Additional error details
    User_1:
      type: object
      properties:
        userId:
          type: integer
          description: Numeric user identifier (conflicts with string id)
        username:
          type: string
          maxLength: 50
          minLength: 3
          description: User's username (conflicts with name field)
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum:
            - admin
            - user
            - guest
          description: User's role in the system
          default: user
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        manager:
          $ref: '#/components/schemas/User_1'
          description: User's manager (creates circular reference)
      required:
        - userId
        - username
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 200
          minLength: 1
        description:
          type: string
        website:
          type: string
          format: uri
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - id
        - name
    external_simple_schema:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
          minLength: 1
        description:
          type: string
          maxLength: 500
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
    external_user_profile:
      type: object
      properties:
        bio:
          type: string
          maxLength: 500
          description: User biography
        avatar_url:
          type: string
          format: uri
          description: URL to user's avatar image
        social_links:
          type: object
          additionalProperties:
            type: string
            format: uri
        preferences:
          $ref: '#/components/schemas/external_user_preferences'
    external_user_preferences:
      type: object
      properties:
        theme:
          type: string
          enum:
            - light
            - dark
            - auto
          default: auto
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: false
    FilterCriteria:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/apiProblem'
        userProfile:
          $ref: '#/components/schemas/external_user_profile'
        userPreferences:
          $ref: '#/components/schemas/external_user_preferences'
        tags:
          type: array
          items:
            type: string
      description: Filter criteria with external references
    apiProblem:
      type: object
      properties:
        type:
          type: string
          maxLength: 2048
          format: uri-reference
          description: |
            A [URI reference (RFC3986)](https://tools.ietf.org/html/rfc3986) that identifies the problem type. If present, this is the URL of human-readable HTML documentation for the problem type. When this member is not present, its value is assumed to be `"about:blank"`.
        title:
          type: string
          maxLength: 120
          format: text
          description: |
            A short, human-readable summary of the problem type. The title is usually the same for all problems with the same `type`.
        status:
          type: integer
          maximum: 599
          minimum: 100
          format: int32
          description: |
            The [HTTP status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6) for this occurrence of the problem.
        detail:
          type: string
          maxLength: 256
          format: text
          description: |
            A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          maxLength: 2048
          format: uri-reference
          description: |
            A URI reference that identifies the specific occurrence of the problem. This is the URI of an API resource that the problem is related to, with a unique error correlation ID URI fragment
      title: API Problem
      description: API problem or error, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).
    PaginationRequest:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
        size:
          type: integer
          maximum: 100
          minimum: 1
          default: 20
        sortUser:
          $ref: '#/components/schemas/external_user'
        metadata:
          $ref: '#/components/schemas/abstractBody'
      description: Pagination request with external validation schema
    external_user:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        name:
          type: string
          maxLength: 100
          minLength: 1
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        profile:
          $ref: '#/components/schemas/external_user_profile'
        posts:
          type: array
          items:
            $ref: external_post.yaml
          description: Posts created by this user
      required:
        - id
        - name
        - email
    external_post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
          minLength: 1
        content:
          type: string
          minLength: 1
        author_id:
          type: string
          format: uuid
        author:
          $ref: '#/components/schemas/external_user'
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - title
        - content
        - author_id
    abstractBody:
      type: object
      properties: {}
      title: Abstract Body
      description: An abstract schema used to define other request and response body model schemas.
  requestBodies:
    CreateUserRequest:
      description: Request body for creating a user
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 100
              email:
                type: string
                format: email
              profile:
                $ref: "#/components/schemas/UserProfile"
    UpdateUserRequest:
      description: Request body for updating a user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 100
              email:
                type: string
                format: email
              profile:
                $ref: "#/components/schemas/UserProfile"
  responses:
    UserResponse:
      description: Single user response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
          examples:
            user_example:
              $ref: "#/components/examples/UserExample"
    UserListResponse:
      description: List of users response
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              total:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 1
              offset:
                type: integer
                minimum: 0
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  examples:
    UserExample:
      summary: Example user
      description: An example user object
      value:
        id: "123e4567-e89b-12d3-a456-426614174000"
        name: "John Doe"
        email: "john.doe@example.com"
        profile:
          bio: "Software developer"
          avatar_url: "https://example.com/avatar.jpg"
          social_links:
            github: "https://github.com/johndoe"
            twitter: "https://twitter.com/johndoe"
          preferences:
            theme: "dark"
            notifications:
              email: true
              push: false
    PostsExample:
      summary: Example posts
      description: An example list of posts
      value:
        - id: "456e7890-e89b-12d3-a456-426614174001"
          title: "My First Post"
          content: "This is my first post content"
          author_id: "123e4567-e89b-12d3-a456-426614174000"
          tags: ["introduction", "first-post"]
          created_at: "2023-01-01T12:00:00Z"
          updated_at: "2023-01-01T12:00:00Z"
  headers:
    X-Rate-Limit:
      description: Rate limit information
      schema:
        type: integer
        minimum: 0
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
security:
  - BearerAuth: []
